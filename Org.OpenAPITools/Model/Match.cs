/*
 * OpenLigaDB-API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Match
    /// </summary>
    [DataContract(Name = "Match")]
    public partial class Match : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Match" /> class.
        /// </summary>
        /// <param name="matchID">matchID.</param>
        /// <param name="matchDateTime">matchDateTime.</param>
        /// <param name="timeZoneID">timeZoneID.</param>
        /// <param name="leagueId">leagueId.</param>
        /// <param name="leagueName">leagueName.</param>
        /// <param name="leagueSeason">leagueSeason.</param>
        /// <param name="leagueShortcut">leagueShortcut.</param>
        /// <param name="matchDateTimeUTC">matchDateTimeUTC.</param>
        /// <param name="group">group.</param>
        /// <param name="team1">team1.</param>
        /// <param name="team2">team2.</param>
        /// <param name="lastUpdateDateTime">lastUpdateDateTime.</param>
        /// <param name="matchIsFinished">matchIsFinished.</param>
        /// <param name="matchResults">matchResults.</param>
        /// <param name="goals">goals.</param>
        /// <param name="location">location.</param>
        /// <param name="numberOfViewers">numberOfViewers.</param>
        public Match(int matchID = default(int), DateTime? matchDateTime = default(DateTime?), string timeZoneID = default(string), int leagueId = default(int), string leagueName = default(string), int leagueSeason = default(int), string leagueShortcut = default(string), DateTime? matchDateTimeUTC = default(DateTime?), Group group = default(Group), Team team1 = default(Team), Team team2 = default(Team), DateTime? lastUpdateDateTime = default(DateTime?), bool matchIsFinished = default(bool), List<MatchResult> matchResults = default(List<MatchResult>), List<Goal> goals = default(List<Goal>), Location location = default(Location), int? numberOfViewers = default(int?))
        {
            this.MatchID = matchID;
            this.MatchDateTime = matchDateTime;
            this.TimeZoneID = timeZoneID;
            this.LeagueId = leagueId;
            this.LeagueName = leagueName;
            this.LeagueSeason = leagueSeason;
            this.LeagueShortcut = leagueShortcut;
            this.MatchDateTimeUTC = matchDateTimeUTC;
            this.Group = group;
            this.Team1 = team1;
            this.Team2 = team2;
            this.LastUpdateDateTime = lastUpdateDateTime;
            this.MatchIsFinished = matchIsFinished;
            this.MatchResults = matchResults;
            this.Goals = goals;
            this.Location = location;
            this.NumberOfViewers = numberOfViewers;
        }

        /// <summary>
        /// Gets or Sets MatchID
        /// </summary>
        [DataMember(Name = "matchID", EmitDefaultValue = false)]
        public int MatchID { get; set; }

        /// <summary>
        /// Gets or Sets MatchDateTime
        /// </summary>
        [DataMember(Name = "matchDateTime", EmitDefaultValue = true)]
        public DateTime? MatchDateTime { get; set; }

        /// <summary>
        /// Gets or Sets TimeZoneID
        /// </summary>
        [DataMember(Name = "timeZoneID", EmitDefaultValue = true)]
        public string TimeZoneID { get; set; }

        /// <summary>
        /// Gets or Sets LeagueId
        /// </summary>
        [DataMember(Name = "leagueId", EmitDefaultValue = false)]
        public int LeagueId { get; set; }

        /// <summary>
        /// Gets or Sets LeagueName
        /// </summary>
        [DataMember(Name = "leagueName", EmitDefaultValue = true)]
        public string LeagueName { get; set; }

        /// <summary>
        /// Gets or Sets LeagueSeason
        /// </summary>
        [DataMember(Name = "leagueSeason", EmitDefaultValue = false)]
        public int LeagueSeason { get; set; }

        /// <summary>
        /// Gets or Sets LeagueShortcut
        /// </summary>
        [DataMember(Name = "leagueShortcut", EmitDefaultValue = true)]
        public string LeagueShortcut { get; set; }

        /// <summary>
        /// Gets or Sets MatchDateTimeUTC
        /// </summary>
        [DataMember(Name = "matchDateTimeUTC", EmitDefaultValue = true)]
        public DateTime? MatchDateTimeUTC { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name = "group", EmitDefaultValue = false)]
        public Group Group { get; set; }

        /// <summary>
        /// Gets or Sets Team1
        /// </summary>
        [DataMember(Name = "team1", EmitDefaultValue = false)]
        public Team Team1 { get; set; }

        /// <summary>
        /// Gets or Sets Team2
        /// </summary>
        [DataMember(Name = "team2", EmitDefaultValue = false)]
        public Team Team2 { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdateDateTime
        /// </summary>
        [DataMember(Name = "lastUpdateDateTime", EmitDefaultValue = true)]
        public DateTime? LastUpdateDateTime { get; set; }

        /// <summary>
        /// Gets or Sets MatchIsFinished
        /// </summary>
        [DataMember(Name = "matchIsFinished", EmitDefaultValue = true)]
        public bool MatchIsFinished { get; set; }

        /// <summary>
        /// Gets or Sets MatchResults
        /// </summary>
        [DataMember(Name = "matchResults", EmitDefaultValue = true)]
        public List<MatchResult> MatchResults { get; set; }

        /// <summary>
        /// Gets or Sets Goals
        /// </summary>
        [DataMember(Name = "goals", EmitDefaultValue = true)]
        public List<Goal> Goals { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfViewers
        /// </summary>
        [DataMember(Name = "numberOfViewers", EmitDefaultValue = true)]
        public int? NumberOfViewers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Match {\n");
            sb.Append("  MatchID: ").Append(MatchID).Append("\n");
            sb.Append("  MatchDateTime: ").Append(MatchDateTime).Append("\n");
            sb.Append("  TimeZoneID: ").Append(TimeZoneID).Append("\n");
            sb.Append("  LeagueId: ").Append(LeagueId).Append("\n");
            sb.Append("  LeagueName: ").Append(LeagueName).Append("\n");
            sb.Append("  LeagueSeason: ").Append(LeagueSeason).Append("\n");
            sb.Append("  LeagueShortcut: ").Append(LeagueShortcut).Append("\n");
            sb.Append("  MatchDateTimeUTC: ").Append(MatchDateTimeUTC).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Team1: ").Append(Team1).Append("\n");
            sb.Append("  Team2: ").Append(Team2).Append("\n");
            sb.Append("  LastUpdateDateTime: ").Append(LastUpdateDateTime).Append("\n");
            sb.Append("  MatchIsFinished: ").Append(MatchIsFinished).Append("\n");
            sb.Append("  MatchResults: ").Append(MatchResults).Append("\n");
            sb.Append("  Goals: ").Append(Goals).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  NumberOfViewers: ").Append(NumberOfViewers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
