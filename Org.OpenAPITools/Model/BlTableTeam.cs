/*
 * OpenLigaDB-API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BlTableTeam
    /// </summary>
    [DataContract(Name = "BlTableTeam")]
    public partial class BlTableTeam : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlTableTeam" /> class.
        /// </summary>
        /// <param name="teamInfoId">teamInfoId.</param>
        /// <param name="teamName">teamName.</param>
        /// <param name="shortName">shortName.</param>
        /// <param name="teamIconUrl">teamIconUrl.</param>
        /// <param name="points">points.</param>
        /// <param name="opponentGoals">opponentGoals.</param>
        /// <param name="goals">goals.</param>
        /// <param name="matches">matches.</param>
        /// <param name="won">won.</param>
        /// <param name="lost">lost.</param>
        /// <param name="draw">draw.</param>
        public BlTableTeam(int teamInfoId = default(int), string teamName = default(string), string shortName = default(string), string teamIconUrl = default(string), int points = default(int), int opponentGoals = default(int), int goals = default(int), int matches = default(int), int won = default(int), int lost = default(int), int draw = default(int))
        {
            this.TeamInfoId = teamInfoId;
            this.TeamName = teamName;
            this.ShortName = shortName;
            this.TeamIconUrl = teamIconUrl;
            this.Points = points;
            this.OpponentGoals = opponentGoals;
            this.Goals = goals;
            this.Matches = matches;
            this.Won = won;
            this.Lost = lost;
            this.Draw = draw;
        }

        /// <summary>
        /// Gets or Sets TeamInfoId
        /// </summary>
        [DataMember(Name = "teamInfoId", EmitDefaultValue = false)]
        public int TeamInfoId { get; set; }

        /// <summary>
        /// Gets or Sets TeamName
        /// </summary>
        [DataMember(Name = "teamName", EmitDefaultValue = true)]
        public string TeamName { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name = "shortName", EmitDefaultValue = true)]
        public string ShortName { get; set; }

        /// <summary>
        /// Gets or Sets TeamIconUrl
        /// </summary>
        [DataMember(Name = "teamIconUrl", EmitDefaultValue = true)]
        public string TeamIconUrl { get; set; }

        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [DataMember(Name = "points", EmitDefaultValue = false)]
        public int Points { get; set; }

        /// <summary>
        /// Gets or Sets OpponentGoals
        /// </summary>
        [DataMember(Name = "opponentGoals", EmitDefaultValue = false)]
        public int OpponentGoals { get; set; }

        /// <summary>
        /// Gets or Sets Goals
        /// </summary>
        [DataMember(Name = "goals", EmitDefaultValue = false)]
        public int Goals { get; set; }

        /// <summary>
        /// Gets or Sets Matches
        /// </summary>
        [DataMember(Name = "matches", EmitDefaultValue = false)]
        public int Matches { get; set; }

        /// <summary>
        /// Gets or Sets Won
        /// </summary>
        [DataMember(Name = "won", EmitDefaultValue = false)]
        public int Won { get; set; }

        /// <summary>
        /// Gets or Sets Lost
        /// </summary>
        [DataMember(Name = "lost", EmitDefaultValue = false)]
        public int Lost { get; set; }

        /// <summary>
        /// Gets or Sets Draw
        /// </summary>
        [DataMember(Name = "draw", EmitDefaultValue = false)]
        public int Draw { get; set; }

        /// <summary>
        /// Gets or Sets GoalDiff
        /// </summary>
        [DataMember(Name = "goalDiff", EmitDefaultValue = false)]
        public int GoalDiff { get; private set; }

        /// <summary>
        /// Returns false as GoalDiff should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGoalDiff()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BlTableTeam {\n");
            sb.Append("  TeamInfoId: ").Append(TeamInfoId).Append("\n");
            sb.Append("  TeamName: ").Append(TeamName).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  TeamIconUrl: ").Append(TeamIconUrl).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  OpponentGoals: ").Append(OpponentGoals).Append("\n");
            sb.Append("  Goals: ").Append(Goals).Append("\n");
            sb.Append("  Matches: ").Append(Matches).Append("\n");
            sb.Append("  Won: ").Append(Won).Append("\n");
            sb.Append("  Lost: ").Append(Lost).Append("\n");
            sb.Append("  Draw: ").Append(Draw).Append("\n");
            sb.Append("  GoalDiff: ").Append(GoalDiff).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
