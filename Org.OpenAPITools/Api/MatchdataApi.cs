/*
 * OpenLigaDB-API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMatchdataApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Group&gt;</returns>
        List<Group> GetavailablegroupsLeagueShortcutLeagueSeasonGet(string leagueShortcut, int leagueSeason, int operationIndex = 0);

        /// <summary>
        /// Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        ApiResponse<List<Group>> GetavailablegroupsLeagueShortcutLeagueSeasonGetWithHttpInfo(string leagueShortcut, int leagueSeason, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;League&gt;</returns>
        List<League> GetavailableleaguesGet(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;League&gt;</returns>
        ApiResponse<List<League>> GetavailableleaguesGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Sport&gt;</returns>
        List<Sport> GetavailablesportsGet(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Sport&gt;</returns>
        ApiResponse<List<Sport>> GetavailablesportsGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Eine Liste der Teams der als Parameter zu übergebenden Liga + Saison
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> GetavailableteamsLeagueShortcutLeagueSeasonGet(string leagueShortcut, int leagueSeason, int operationIndex = 0);

        /// <summary>
        /// Eine Liste der Teams der als Parameter zu übergebenden Liga + Saison
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> GetavailableteamsLeagueShortcutLeagueSeasonGetWithHttpInfo(string leagueShortcut, int leagueSeason, int operationIndex = 0);
        /// <summary>
        /// returns the table
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BlTableTeam&gt;</returns>
        List<BlTableTeam> GetbltableLeagueShortcutLeagueSeasonGet(string leagueShortcut, int leagueSeason, int operationIndex = 0);

        /// <summary>
        /// returns the table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BlTableTeam&gt;</returns>
        ApiResponse<List<BlTableTeam>> GetbltableLeagueShortcutLeagueSeasonGetWithHttpInfo(string leagueShortcut, int leagueSeason, int operationIndex = 0);
        /// <summary>
        /// Gibt die aktuelle Group (entspricht z.B. bei der Fussball-Bundesliga dem &#39;Spieltag&#39;) des als Parameter zu übergebenden leagueShortcuts (z.B. &#39;bl1&#39;) aus. Der aktuelle Spieltag  wird jeweils zur Hälfte der Zeit zwischen dem letzten Spiel des letzten Spieltages und dem ersten Spiel des nächsten Spieltages erhöht.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Group</returns>
        Group GetcurrentgroupLeagueShortcutGet(string leagueShortcut, int operationIndex = 0);

        /// <summary>
        /// Gibt die aktuelle Group (entspricht z.B. bei der Fussball-Bundesliga dem &#39;Spieltag&#39;) des als Parameter zu übergebenden leagueShortcuts (z.B. &#39;bl1&#39;) aus. Der aktuelle Spieltag  wird jeweils zur Hälfte der Zeit zwischen dem letzten Spiel des letzten Spieltages und dem ersten Spiel des nächsten Spieltages erhöht.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> GetcurrentgroupLeagueShortcutGetWithHttpInfo(string leagueShortcut, int operationIndex = 0);
        /// <summary>
        /// Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GoalGetter&gt;</returns>
        List<GoalGetter> GetgoalgettersLeagueShortcutLeagueSeasonGet(string leagueShortcut, int leagueSeason, int operationIndex = 0);

        /// <summary>
        /// Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GoalGetter&gt;</returns>
        ApiResponse<List<GoalGetter>> GetgoalgettersLeagueShortcutLeagueSeasonGetWithHttpInfo(string leagueShortcut, int leagueSeason, int operationIndex = 0);
        /// <summary>
        /// returns the table
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BlTableTeam&gt;</returns>
        List<BlTableTeam> GetgrouptableLeagueShortcutLeagueSeasonGet(string leagueShortcut, int leagueSeason, int operationIndex = 0);

        /// <summary>
        /// returns the table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BlTableTeam&gt;</returns>
        ApiResponse<List<BlTableTeam>> GetgrouptableLeagueShortcutLeagueSeasonGetWithHttpInfo(string leagueShortcut, int leagueSeason, int operationIndex = 0);
        /// <summary>
        /// Gibt ein DateTime-Objekt der letzten Änderung der Daten der übergebenen Liga (leagueShortcut) für die übergebene Saison (leagueSeason) für den übergebenen Spieltag (groupOrderId) zurueck.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="groupOrderId">beim Fußball der Spieltag, z.B. 1</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DateTime</returns>
        DateTime GetlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGet(string leagueShortcut, int leagueSeason, int groupOrderId, int operationIndex = 0);

        /// <summary>
        /// Gibt ein DateTime-Objekt der letzten Änderung der Daten der übergebenen Liga (leagueShortcut) für die übergebene Saison (leagueSeason) für den übergebenen Spieltag (groupOrderId) zurueck.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="groupOrderId">beim Fußball der Spieltag, z.B. 1</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DateTime</returns>
        ApiResponse<DateTime> GetlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGetWithHttpInfo(string leagueShortcut, int leagueSeason, int groupOrderId, int operationIndex = 0);
        /// <summary>
        /// Gibt das letzte Spiel des übergebenen LigaShortcuts zurueck.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">Der Liga-Shortcut</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Match</returns>
        Match GetlastmatchbyleagueshortcutLeagueShortcutGet(string leagueShortcut, int operationIndex = 0);

        /// <summary>
        /// Gibt das letzte Spiel des übergebenen LigaShortcuts zurueck.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">Der Liga-Shortcut</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Match</returns>
        ApiResponse<Match> GetlastmatchbyleagueshortcutLeagueShortcutGetWithHttpInfo(string leagueShortcut, int operationIndex = 0);
        /// <summary>
        /// Gibt das letzte zurückliegende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">die Id der Liga</param>
        /// <param name="teamId">die Id des Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Match</returns>
        Match GetlastmatchbyleagueteamLeagueIdTeamIdGet(int leagueId, int teamId, int operationIndex = 0);

        /// <summary>
        /// Gibt das letzte zurückliegende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">die Id der Liga</param>
        /// <param name="teamId">die Id des Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Match</returns>
        ApiResponse<Match> GetlastmatchbyleagueteamLeagueIdTeamIdGetWithHttpInfo(int leagueId, int teamId, int operationIndex = 0);
        /// <summary>
        /// Gibt eine Struktur von Spieldaten aller Spiele der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) zurueck.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Match&gt;</returns>
        List<Match> GetmatchdataLeagueShortcutLeagueSeasonGet(string leagueShortcut, int leagueSeason, int operationIndex = 0);

        /// <summary>
        /// Gibt eine Struktur von Spieldaten aller Spiele der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) zurueck.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        ApiResponse<List<Match>> GetmatchdataLeagueShortcutLeagueSeasonGetWithHttpInfo(string leagueShortcut, int leagueSeason, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="groupOrderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Match&gt;</returns>
        List<Match> GetmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGet(string leagueShortcut, int leagueSeason, int groupOrderId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="groupOrderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        ApiResponse<List<Match>> GetmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGetWithHttpInfo(string leagueShortcut, int leagueSeason, int groupOrderId, int operationIndex = 0);
        /// <summary>
        /// Gibt eine Struktur von Spieldaten aller Spiele eines Teams der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) für das im \&quot;teamFilterstring\&quot; übergebene Team zurueck.   Hier reicht ein Teil des Vereinsnamen aus.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="teamFilterstring">Name bzw. Teil des Namens eines Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Match&gt;</returns>
        List<Match> GetmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet(string leagueShortcut, int leagueSeason, string teamFilterstring, int operationIndex = 0);

        /// <summary>
        /// Gibt eine Struktur von Spieldaten aller Spiele eines Teams der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) für das im \&quot;teamFilterstring\&quot; übergebene Team zurueck.   Hier reicht ein Teil des Vereinsnamen aus.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="teamFilterstring">Name bzw. Teil des Namens eines Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        ApiResponse<List<Match>> GetmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGetWithHttpInfo(string leagueShortcut, int leagueSeason, string teamFilterstring, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Match</returns>
        Match GetmatchdataMatchIdGet(int matchId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Match</returns>
        ApiResponse<Match> GetmatchdataMatchIdGetWithHttpInfo(int matchId, int operationIndex = 0);
        /// <summary>
        /// Gibt eine Struktur von Matches zurück, bei welchen die als Parameter übergebenen Teams gegeneinander spielen.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId1">die Id des ersten Teams</param>
        /// <param name="teamId2">die Id des anderen Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Match&gt;</returns>
        List<Match> GetmatchdataTeamId1TeamId2Get(int teamId1, int teamId2, int operationIndex = 0);

        /// <summary>
        /// Gibt eine Struktur von Matches zurück, bei welchen die als Parameter übergebenen Teams gegeneinander spielen.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId1">die Id des ersten Teams</param>
        /// <param name="teamId2">die Id des anderen Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        ApiResponse<List<Match>> GetmatchdataTeamId1TeamId2GetWithHttpInfo(int teamId1, int teamId2, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamFilterstring"></param>
        /// <param name="weekCountPast"></param>
        /// <param name="weekCountFuture"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Match&gt;</returns>
        List<Match> GetmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGet(string teamFilterstring, int weekCountPast, int weekCountFuture, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamFilterstring"></param>
        /// <param name="weekCountPast"></param>
        /// <param name="weekCountFuture"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        ApiResponse<List<Match>> GetmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGetWithHttpInfo(string teamFilterstring, int weekCountPast, int weekCountFuture, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="weekCountPast"></param>
        /// <param name="weekCountFuture"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Match&gt;</returns>
        List<Match> GetmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGet(int teamId, int weekCountPast, int weekCountFuture, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="weekCountPast"></param>
        /// <param name="weekCountFuture"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        ApiResponse<List<Match>> GetmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGetWithHttpInfo(int teamId, int weekCountPast, int weekCountFuture, int operationIndex = 0);
        /// <summary>
        /// Gibt das nächste folgende Spiel des übergebenen LigaShortcuts zurueck.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">Der Liga-Shortcut</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Match</returns>
        Match GetnextmatchbyleagueshortcutLeagueShortcutGet(string leagueShortcut, int operationIndex = 0);

        /// <summary>
        /// Gibt das nächste folgende Spiel des übergebenen LigaShortcuts zurueck.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">Der Liga-Shortcut</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Match</returns>
        ApiResponse<Match> GetnextmatchbyleagueshortcutLeagueShortcutGetWithHttpInfo(string leagueShortcut, int operationIndex = 0);
        /// <summary>
        /// Gibt das nächste folgende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">die Id der Liga</param>
        /// <param name="teamId">die Id des Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Match</returns>
        Match GetnextmatchbyleagueteamLeagueIdTeamIdGet(int leagueId, int teamId, int operationIndex = 0);

        /// <summary>
        /// Gibt das nächste folgende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">die Id der Liga</param>
        /// <param name="teamId">die Id des Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Match</returns>
        ApiResponse<Match> GetnextmatchbyleagueteamLeagueIdTeamIdGetWithHttpInfo(int leagueId, int teamId, int operationIndex = 0);
        /// <summary>
        /// Gibt die für diese Liga konfigurierten Ergebnistypen zurück!
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Id der Liga, z.B. &#39;4500&#39; für die erste Bundesliga 2021/2022</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResultInfo</returns>
        ResultInfo GetresultinfosLeagueIdGet(int leagueId, int operationIndex = 0);

        /// <summary>
        /// Gibt die für diese Liga konfigurierten Ergebnistypen zurück!
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Id der Liga, z.B. &#39;4500&#39; für die erste Bundesliga 2021/2022</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResultInfo</returns>
        ApiResponse<ResultInfo> GetresultinfosLeagueIdGetWithHttpInfo(int leagueId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMatchdataApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        System.Threading.Tasks.Task<List<Group>> GetavailablegroupsLeagueShortcutLeagueSeasonGetAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Group>>> GetavailablegroupsLeagueShortcutLeagueSeasonGetWithHttpInfoAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;League&gt;</returns>
        System.Threading.Tasks.Task<List<League>> GetavailableleaguesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;League&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<League>>> GetavailableleaguesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Sport&gt;</returns>
        System.Threading.Tasks.Task<List<Sport>> GetavailablesportsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Sport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Sport>>> GetavailablesportsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Eine Liste der Teams der als Parameter zu übergebenden Liga + Saison
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> GetavailableteamsLeagueShortcutLeagueSeasonGetAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Eine Liste der Teams der als Parameter zu übergebenden Liga + Saison
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> GetavailableteamsLeagueShortcutLeagueSeasonGetWithHttpInfoAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// returns the table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BlTableTeam&gt;</returns>
        System.Threading.Tasks.Task<List<BlTableTeam>> GetbltableLeagueShortcutLeagueSeasonGetAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// returns the table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BlTableTeam&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BlTableTeam>>> GetbltableLeagueShortcutLeagueSeasonGetWithHttpInfoAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Gibt die aktuelle Group (entspricht z.B. bei der Fussball-Bundesliga dem &#39;Spieltag&#39;) des als Parameter zu übergebenden leagueShortcuts (z.B. &#39;bl1&#39;) aus. Der aktuelle Spieltag  wird jeweils zur Hälfte der Zeit zwischen dem letzten Spiel des letzten Spieltages und dem ersten Spiel des nächsten Spieltages erhöht.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> GetcurrentgroupLeagueShortcutGetAsync(string leagueShortcut, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Gibt die aktuelle Group (entspricht z.B. bei der Fussball-Bundesliga dem &#39;Spieltag&#39;) des als Parameter zu übergebenden leagueShortcuts (z.B. &#39;bl1&#39;) aus. Der aktuelle Spieltag  wird jeweils zur Hälfte der Zeit zwischen dem letzten Spiel des letzten Spieltages und dem ersten Spiel des nächsten Spieltages erhöht.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> GetcurrentgroupLeagueShortcutGetWithHttpInfoAsync(string leagueShortcut, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GoalGetter&gt;</returns>
        System.Threading.Tasks.Task<List<GoalGetter>> GetgoalgettersLeagueShortcutLeagueSeasonGetAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GoalGetter&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GoalGetter>>> GetgoalgettersLeagueShortcutLeagueSeasonGetWithHttpInfoAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// returns the table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BlTableTeam&gt;</returns>
        System.Threading.Tasks.Task<List<BlTableTeam>> GetgrouptableLeagueShortcutLeagueSeasonGetAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// returns the table
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BlTableTeam&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BlTableTeam>>> GetgrouptableLeagueShortcutLeagueSeasonGetWithHttpInfoAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Gibt ein DateTime-Objekt der letzten Änderung der Daten der übergebenen Liga (leagueShortcut) für die übergebene Saison (leagueSeason) für den übergebenen Spieltag (groupOrderId) zurueck.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="groupOrderId">beim Fußball der Spieltag, z.B. 1</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DateTime</returns>
        System.Threading.Tasks.Task<DateTime> GetlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGetAsync(string leagueShortcut, int leagueSeason, int groupOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Gibt ein DateTime-Objekt der letzten Änderung der Daten der übergebenen Liga (leagueShortcut) für die übergebene Saison (leagueSeason) für den übergebenen Spieltag (groupOrderId) zurueck.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="groupOrderId">beim Fußball der Spieltag, z.B. 1</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DateTime)</returns>
        System.Threading.Tasks.Task<ApiResponse<DateTime>> GetlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGetWithHttpInfoAsync(string leagueShortcut, int leagueSeason, int groupOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Gibt das letzte Spiel des übergebenen LigaShortcuts zurueck.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">Der Liga-Shortcut</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Match</returns>
        System.Threading.Tasks.Task<Match> GetlastmatchbyleagueshortcutLeagueShortcutGetAsync(string leagueShortcut, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Gibt das letzte Spiel des übergebenen LigaShortcuts zurueck.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">Der Liga-Shortcut</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Match)</returns>
        System.Threading.Tasks.Task<ApiResponse<Match>> GetlastmatchbyleagueshortcutLeagueShortcutGetWithHttpInfoAsync(string leagueShortcut, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Gibt das letzte zurückliegende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">die Id der Liga</param>
        /// <param name="teamId">die Id des Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Match</returns>
        System.Threading.Tasks.Task<Match> GetlastmatchbyleagueteamLeagueIdTeamIdGetAsync(int leagueId, int teamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Gibt das letzte zurückliegende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">die Id der Liga</param>
        /// <param name="teamId">die Id des Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Match)</returns>
        System.Threading.Tasks.Task<ApiResponse<Match>> GetlastmatchbyleagueteamLeagueIdTeamIdGetWithHttpInfoAsync(int leagueId, int teamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Gibt eine Struktur von Spieldaten aller Spiele der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) zurueck.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        System.Threading.Tasks.Task<List<Match>> GetmatchdataLeagueShortcutLeagueSeasonGetAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Gibt eine Struktur von Spieldaten aller Spiele der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) zurueck.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetmatchdataLeagueShortcutLeagueSeasonGetWithHttpInfoAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="groupOrderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        System.Threading.Tasks.Task<List<Match>> GetmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGetAsync(string leagueShortcut, int leagueSeason, int groupOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="groupOrderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGetWithHttpInfoAsync(string leagueShortcut, int leagueSeason, int groupOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Gibt eine Struktur von Spieldaten aller Spiele eines Teams der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) für das im \&quot;teamFilterstring\&quot; übergebene Team zurueck.   Hier reicht ein Teil des Vereinsnamen aus.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="teamFilterstring">Name bzw. Teil des Namens eines Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        System.Threading.Tasks.Task<List<Match>> GetmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGetAsync(string leagueShortcut, int leagueSeason, string teamFilterstring, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Gibt eine Struktur von Spieldaten aller Spiele eines Teams der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) für das im \&quot;teamFilterstring\&quot; übergebene Team zurueck.   Hier reicht ein Teil des Vereinsnamen aus.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="teamFilterstring">Name bzw. Teil des Namens eines Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGetWithHttpInfoAsync(string leagueShortcut, int leagueSeason, string teamFilterstring, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Match</returns>
        System.Threading.Tasks.Task<Match> GetmatchdataMatchIdGetAsync(int matchId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Match)</returns>
        System.Threading.Tasks.Task<ApiResponse<Match>> GetmatchdataMatchIdGetWithHttpInfoAsync(int matchId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Gibt eine Struktur von Matches zurück, bei welchen die als Parameter übergebenen Teams gegeneinander spielen.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId1">die Id des ersten Teams</param>
        /// <param name="teamId2">die Id des anderen Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        System.Threading.Tasks.Task<List<Match>> GetmatchdataTeamId1TeamId2GetAsync(int teamId1, int teamId2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Gibt eine Struktur von Matches zurück, bei welchen die als Parameter übergebenen Teams gegeneinander spielen.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId1">die Id des ersten Teams</param>
        /// <param name="teamId2">die Id des anderen Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetmatchdataTeamId1TeamId2GetWithHttpInfoAsync(int teamId1, int teamId2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamFilterstring"></param>
        /// <param name="weekCountPast"></param>
        /// <param name="weekCountFuture"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        System.Threading.Tasks.Task<List<Match>> GetmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGetAsync(string teamFilterstring, int weekCountPast, int weekCountFuture, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamFilterstring"></param>
        /// <param name="weekCountPast"></param>
        /// <param name="weekCountFuture"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGetWithHttpInfoAsync(string teamFilterstring, int weekCountPast, int weekCountFuture, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="weekCountPast"></param>
        /// <param name="weekCountFuture"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        System.Threading.Tasks.Task<List<Match>> GetmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGetAsync(int teamId, int weekCountPast, int weekCountFuture, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="weekCountPast"></param>
        /// <param name="weekCountFuture"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Match>>> GetmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGetWithHttpInfoAsync(int teamId, int weekCountPast, int weekCountFuture, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Gibt das nächste folgende Spiel des übergebenen LigaShortcuts zurueck.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">Der Liga-Shortcut</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Match</returns>
        System.Threading.Tasks.Task<Match> GetnextmatchbyleagueshortcutLeagueShortcutGetAsync(string leagueShortcut, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Gibt das nächste folgende Spiel des übergebenen LigaShortcuts zurueck.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">Der Liga-Shortcut</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Match)</returns>
        System.Threading.Tasks.Task<ApiResponse<Match>> GetnextmatchbyleagueshortcutLeagueShortcutGetWithHttpInfoAsync(string leagueShortcut, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Gibt das nächste folgende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">die Id der Liga</param>
        /// <param name="teamId">die Id des Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Match</returns>
        System.Threading.Tasks.Task<Match> GetnextmatchbyleagueteamLeagueIdTeamIdGetAsync(int leagueId, int teamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Gibt das nächste folgende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">die Id der Liga</param>
        /// <param name="teamId">die Id des Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Match)</returns>
        System.Threading.Tasks.Task<ApiResponse<Match>> GetnextmatchbyleagueteamLeagueIdTeamIdGetWithHttpInfoAsync(int leagueId, int teamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Gibt die für diese Liga konfigurierten Ergebnistypen zurück!
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Id der Liga, z.B. &#39;4500&#39; für die erste Bundesliga 2021/2022</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResultInfo</returns>
        System.Threading.Tasks.Task<ResultInfo> GetresultinfosLeagueIdGetAsync(int leagueId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Gibt die für diese Liga konfigurierten Ergebnistypen zurück!
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Id der Liga, z.B. &#39;4500&#39; für die erste Bundesliga 2021/2022</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResultInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultInfo>> GetresultinfosLeagueIdGetWithHttpInfoAsync(int leagueId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMatchdataApi : IMatchdataApiSync, IMatchdataApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MatchdataApi : IMatchdataApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MatchdataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MatchdataApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatchdataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MatchdataApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatchdataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MatchdataApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatchdataApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MatchdataApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Group&gt;</returns>
        public List<Group> GetavailablegroupsLeagueShortcutLeagueSeasonGet(string leagueShortcut, int leagueSeason, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Group>> localVarResponse = GetavailablegroupsLeagueShortcutLeagueSeasonGetWithHttpInfo(leagueShortcut, leagueSeason);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Group&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Group>> GetavailablegroupsLeagueShortcutLeagueSeasonGetWithHttpInfo(string leagueShortcut, int leagueSeason, int operationIndex = 0)
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetavailablegroupsLeagueShortcutLeagueSeasonGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeason", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueSeason)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetavailablegroupsLeagueShortcutLeagueSeasonGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Group>>("/getavailablegroups/{leagueShortcut}/{leagueSeason}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetavailablegroupsLeagueShortcutLeagueSeasonGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Group&gt;</returns>
        public async System.Threading.Tasks.Task<List<Group>> GetavailablegroupsLeagueShortcutLeagueSeasonGetAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Group>> localVarResponse = await GetavailablegroupsLeagueShortcutLeagueSeasonGetWithHttpInfoAsync(leagueShortcut, leagueSeason, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Group&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Group>>> GetavailablegroupsLeagueShortcutLeagueSeasonGetWithHttpInfoAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetavailablegroupsLeagueShortcutLeagueSeasonGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeason", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueSeason)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetavailablegroupsLeagueShortcutLeagueSeasonGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Group>>("/getavailablegroups/{leagueShortcut}/{leagueSeason}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetavailablegroupsLeagueShortcutLeagueSeasonGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;League&gt;</returns>
        public List<League> GetavailableleaguesGet(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<League>> localVarResponse = GetavailableleaguesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;League&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<League>> GetavailableleaguesGetWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MatchdataApi.GetavailableleaguesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<League>>("/getavailableleagues", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetavailableleaguesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;League&gt;</returns>
        public async System.Threading.Tasks.Task<List<League>> GetavailableleaguesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<League>> localVarResponse = await GetavailableleaguesGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;League&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<League>>> GetavailableleaguesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MatchdataApi.GetavailableleaguesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<League>>("/getavailableleagues", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetavailableleaguesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Sport&gt;</returns>
        public List<Sport> GetavailablesportsGet(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Sport>> localVarResponse = GetavailablesportsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Sport&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Sport>> GetavailablesportsGetWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MatchdataApi.GetavailablesportsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Sport>>("/getavailablesports", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetavailablesportsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Sport&gt;</returns>
        public async System.Threading.Tasks.Task<List<Sport>> GetavailablesportsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Sport>> localVarResponse = await GetavailablesportsGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Sport&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Sport>>> GetavailablesportsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MatchdataApi.GetavailablesportsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Sport>>("/getavailablesports", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetavailablesportsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Eine Liste der Teams der als Parameter zu übergebenden Liga + Saison 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> GetavailableteamsLeagueShortcutLeagueSeasonGet(string leagueShortcut, int leagueSeason, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Team>> localVarResponse = GetavailableteamsLeagueShortcutLeagueSeasonGetWithHttpInfo(leagueShortcut, leagueSeason);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Eine Liste der Teams der als Parameter zu übergebenden Liga + Saison 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Team>> GetavailableteamsLeagueShortcutLeagueSeasonGetWithHttpInfo(string leagueShortcut, int leagueSeason, int operationIndex = 0)
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetavailableteamsLeagueShortcutLeagueSeasonGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeason", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueSeason)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetavailableteamsLeagueShortcutLeagueSeasonGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Team>>("/getavailableteams/{leagueShortcut}/{leagueSeason}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetavailableteamsLeagueShortcutLeagueSeasonGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Eine Liste der Teams der als Parameter zu übergebenden Liga + Saison 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> GetavailableteamsLeagueShortcutLeagueSeasonGetAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Team>> localVarResponse = await GetavailableteamsLeagueShortcutLeagueSeasonGetWithHttpInfoAsync(leagueShortcut, leagueSeason, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Eine Liste der Teams der als Parameter zu übergebenden Liga + Saison 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Team>>> GetavailableteamsLeagueShortcutLeagueSeasonGetWithHttpInfoAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetavailableteamsLeagueShortcutLeagueSeasonGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeason", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueSeason)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetavailableteamsLeagueShortcutLeagueSeasonGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Team>>("/getavailableteams/{leagueShortcut}/{leagueSeason}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetavailableteamsLeagueShortcutLeagueSeasonGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// returns the table 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BlTableTeam&gt;</returns>
        public List<BlTableTeam> GetbltableLeagueShortcutLeagueSeasonGet(string leagueShortcut, int leagueSeason, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<BlTableTeam>> localVarResponse = GetbltableLeagueShortcutLeagueSeasonGetWithHttpInfo(leagueShortcut, leagueSeason);
            return localVarResponse.Data;
        }

        /// <summary>
        /// returns the table 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BlTableTeam&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<BlTableTeam>> GetbltableLeagueShortcutLeagueSeasonGetWithHttpInfo(string leagueShortcut, int leagueSeason, int operationIndex = 0)
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetbltableLeagueShortcutLeagueSeasonGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeason", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueSeason)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetbltableLeagueShortcutLeagueSeasonGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<BlTableTeam>>("/getbltable/{leagueShortcut}/{leagueSeason}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetbltableLeagueShortcutLeagueSeasonGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// returns the table 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BlTableTeam&gt;</returns>
        public async System.Threading.Tasks.Task<List<BlTableTeam>> GetbltableLeagueShortcutLeagueSeasonGetAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<BlTableTeam>> localVarResponse = await GetbltableLeagueShortcutLeagueSeasonGetWithHttpInfoAsync(leagueShortcut, leagueSeason, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// returns the table 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BlTableTeam&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<BlTableTeam>>> GetbltableLeagueShortcutLeagueSeasonGetWithHttpInfoAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetbltableLeagueShortcutLeagueSeasonGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeason", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueSeason)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetbltableLeagueShortcutLeagueSeasonGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<BlTableTeam>>("/getbltable/{leagueShortcut}/{leagueSeason}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetbltableLeagueShortcutLeagueSeasonGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt die aktuelle Group (entspricht z.B. bei der Fussball-Bundesliga dem &#39;Spieltag&#39;) des als Parameter zu übergebenden leagueShortcuts (z.B. &#39;bl1&#39;) aus. Der aktuelle Spieltag  wird jeweils zur Hälfte der Zeit zwischen dem letzten Spiel des letzten Spieltages und dem ersten Spiel des nächsten Spieltages erhöht. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Group</returns>
        public Group GetcurrentgroupLeagueShortcutGet(string leagueShortcut, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Group> localVarResponse = GetcurrentgroupLeagueShortcutGetWithHttpInfo(leagueShortcut);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt die aktuelle Group (entspricht z.B. bei der Fussball-Bundesliga dem &#39;Spieltag&#39;) des als Parameter zu übergebenden leagueShortcuts (z.B. &#39;bl1&#39;) aus. Der aktuelle Spieltag  wird jeweils zur Hälfte der Zeit zwischen dem letzten Spiel des letzten Spieltages und dem ersten Spiel des nächsten Spieltages erhöht. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Group</returns>
        public Org.OpenAPITools.Client.ApiResponse<Group> GetcurrentgroupLeagueShortcutGetWithHttpInfo(string leagueShortcut, int operationIndex = 0)
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetcurrentgroupLeagueShortcutGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetcurrentgroupLeagueShortcutGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Group>("/getcurrentgroup/{leagueShortcut}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetcurrentgroupLeagueShortcutGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt die aktuelle Group (entspricht z.B. bei der Fussball-Bundesliga dem &#39;Spieltag&#39;) des als Parameter zu übergebenden leagueShortcuts (z.B. &#39;bl1&#39;) aus. Der aktuelle Spieltag  wird jeweils zur Hälfte der Zeit zwischen dem letzten Spiel des letzten Spieltages und dem ersten Spiel des nächsten Spieltages erhöht. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> GetcurrentgroupLeagueShortcutGetAsync(string leagueShortcut, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Group> localVarResponse = await GetcurrentgroupLeagueShortcutGetWithHttpInfoAsync(leagueShortcut, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt die aktuelle Group (entspricht z.B. bei der Fussball-Bundesliga dem &#39;Spieltag&#39;) des als Parameter zu übergebenden leagueShortcuts (z.B. &#39;bl1&#39;) aus. Der aktuelle Spieltag  wird jeweils zur Hälfte der Zeit zwischen dem letzten Spiel des letzten Spieltages und dem ersten Spiel des nächsten Spieltages erhöht. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Group>> GetcurrentgroupLeagueShortcutGetWithHttpInfoAsync(string leagueShortcut, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetcurrentgroupLeagueShortcutGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetcurrentgroupLeagueShortcutGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Group>("/getcurrentgroup/{leagueShortcut}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetcurrentgroupLeagueShortcutGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GoalGetter&gt;</returns>
        public List<GoalGetter> GetgoalgettersLeagueShortcutLeagueSeasonGet(string leagueShortcut, int leagueSeason, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<GoalGetter>> localVarResponse = GetgoalgettersLeagueShortcutLeagueSeasonGetWithHttpInfo(leagueShortcut, leagueSeason);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GoalGetter&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<GoalGetter>> GetgoalgettersLeagueShortcutLeagueSeasonGetWithHttpInfo(string leagueShortcut, int leagueSeason, int operationIndex = 0)
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetgoalgettersLeagueShortcutLeagueSeasonGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeason", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueSeason)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetgoalgettersLeagueShortcutLeagueSeasonGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GoalGetter>>("/getgoalgetters/{leagueShortcut}/{leagueSeason}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetgoalgettersLeagueShortcutLeagueSeasonGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GoalGetter&gt;</returns>
        public async System.Threading.Tasks.Task<List<GoalGetter>> GetgoalgettersLeagueShortcutLeagueSeasonGetAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<GoalGetter>> localVarResponse = await GetgoalgettersLeagueShortcutLeagueSeasonGetWithHttpInfoAsync(leagueShortcut, leagueSeason, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GoalGetter&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<GoalGetter>>> GetgoalgettersLeagueShortcutLeagueSeasonGetWithHttpInfoAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetgoalgettersLeagueShortcutLeagueSeasonGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeason", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueSeason)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetgoalgettersLeagueShortcutLeagueSeasonGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GoalGetter>>("/getgoalgetters/{leagueShortcut}/{leagueSeason}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetgoalgettersLeagueShortcutLeagueSeasonGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// returns the table 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BlTableTeam&gt;</returns>
        public List<BlTableTeam> GetgrouptableLeagueShortcutLeagueSeasonGet(string leagueShortcut, int leagueSeason, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<BlTableTeam>> localVarResponse = GetgrouptableLeagueShortcutLeagueSeasonGetWithHttpInfo(leagueShortcut, leagueSeason);
            return localVarResponse.Data;
        }

        /// <summary>
        /// returns the table 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BlTableTeam&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<BlTableTeam>> GetgrouptableLeagueShortcutLeagueSeasonGetWithHttpInfo(string leagueShortcut, int leagueSeason, int operationIndex = 0)
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetgrouptableLeagueShortcutLeagueSeasonGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeason", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueSeason)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetgrouptableLeagueShortcutLeagueSeasonGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<BlTableTeam>>("/getgrouptable/{leagueShortcut}/{leagueSeason}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetgrouptableLeagueShortcutLeagueSeasonGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// returns the table 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BlTableTeam&gt;</returns>
        public async System.Threading.Tasks.Task<List<BlTableTeam>> GetgrouptableLeagueShortcutLeagueSeasonGetAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<BlTableTeam>> localVarResponse = await GetgrouptableLeagueShortcutLeagueSeasonGetWithHttpInfoAsync(leagueShortcut, leagueSeason, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// returns the table 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BlTableTeam&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<BlTableTeam>>> GetgrouptableLeagueShortcutLeagueSeasonGetWithHttpInfoAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetgrouptableLeagueShortcutLeagueSeasonGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeason", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueSeason)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetgrouptableLeagueShortcutLeagueSeasonGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<BlTableTeam>>("/getgrouptable/{leagueShortcut}/{leagueSeason}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetgrouptableLeagueShortcutLeagueSeasonGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt ein DateTime-Objekt der letzten Änderung der Daten der übergebenen Liga (leagueShortcut) für die übergebene Saison (leagueSeason) für den übergebenen Spieltag (groupOrderId) zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="groupOrderId">beim Fußball der Spieltag, z.B. 1</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DateTime</returns>
        public DateTime GetlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGet(string leagueShortcut, int leagueSeason, int groupOrderId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DateTime> localVarResponse = GetlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGetWithHttpInfo(leagueShortcut, leagueSeason, groupOrderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt ein DateTime-Objekt der letzten Änderung der Daten der übergebenen Liga (leagueShortcut) für die übergebene Saison (leagueSeason) für den übergebenen Spieltag (groupOrderId) zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="groupOrderId">beim Fußball der Spieltag, z.B. 1</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DateTime</returns>
        public Org.OpenAPITools.Client.ApiResponse<DateTime> GetlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGetWithHttpInfo(string leagueShortcut, int leagueSeason, int groupOrderId, int operationIndex = 0)
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeason", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueSeason)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupOrderId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupOrderId)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<DateTime>("/getlastchangedate/{leagueShortcut}/{leagueSeason}/{groupOrderId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt ein DateTime-Objekt der letzten Änderung der Daten der übergebenen Liga (leagueShortcut) für die übergebene Saison (leagueSeason) für den übergebenen Spieltag (groupOrderId) zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="groupOrderId">beim Fußball der Spieltag, z.B. 1</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DateTime</returns>
        public async System.Threading.Tasks.Task<DateTime> GetlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGetAsync(string leagueShortcut, int leagueSeason, int groupOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DateTime> localVarResponse = await GetlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGetWithHttpInfoAsync(leagueShortcut, leagueSeason, groupOrderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt ein DateTime-Objekt der letzten Änderung der Daten der übergebenen Liga (leagueShortcut) für die übergebene Saison (leagueSeason) für den übergebenen Spieltag (groupOrderId) zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="groupOrderId">beim Fußball der Spieltag, z.B. 1</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DateTime)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DateTime>> GetlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGetWithHttpInfoAsync(string leagueShortcut, int leagueSeason, int groupOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeason", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueSeason)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupOrderId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupOrderId)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DateTime>("/getlastchangedate/{leagueShortcut}/{leagueSeason}/{groupOrderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetlastchangedateLeagueShortcutLeagueSeasonGroupOrderIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt das letzte Spiel des übergebenen LigaShortcuts zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">Der Liga-Shortcut</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Match</returns>
        public Match GetlastmatchbyleagueshortcutLeagueShortcutGet(string leagueShortcut, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Match> localVarResponse = GetlastmatchbyleagueshortcutLeagueShortcutGetWithHttpInfo(leagueShortcut);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt das letzte Spiel des übergebenen LigaShortcuts zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">Der Liga-Shortcut</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Match</returns>
        public Org.OpenAPITools.Client.ApiResponse<Match> GetlastmatchbyleagueshortcutLeagueShortcutGetWithHttpInfo(string leagueShortcut, int operationIndex = 0)
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetlastmatchbyleagueshortcutLeagueShortcutGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetlastmatchbyleagueshortcutLeagueShortcutGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Match>("/getlastmatchbyleagueshortcut/{leagueShortcut}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetlastmatchbyleagueshortcutLeagueShortcutGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt das letzte Spiel des übergebenen LigaShortcuts zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">Der Liga-Shortcut</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Match</returns>
        public async System.Threading.Tasks.Task<Match> GetlastmatchbyleagueshortcutLeagueShortcutGetAsync(string leagueShortcut, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Match> localVarResponse = await GetlastmatchbyleagueshortcutLeagueShortcutGetWithHttpInfoAsync(leagueShortcut, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt das letzte Spiel des übergebenen LigaShortcuts zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">Der Liga-Shortcut</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Match)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Match>> GetlastmatchbyleagueshortcutLeagueShortcutGetWithHttpInfoAsync(string leagueShortcut, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetlastmatchbyleagueshortcutLeagueShortcutGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetlastmatchbyleagueshortcutLeagueShortcutGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Match>("/getlastmatchbyleagueshortcut/{leagueShortcut}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetlastmatchbyleagueshortcutLeagueShortcutGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt das letzte zurückliegende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">die Id der Liga</param>
        /// <param name="teamId">die Id des Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Match</returns>
        public Match GetlastmatchbyleagueteamLeagueIdTeamIdGet(int leagueId, int teamId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Match> localVarResponse = GetlastmatchbyleagueteamLeagueIdTeamIdGetWithHttpInfo(leagueId, teamId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt das letzte zurückliegende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">die Id der Liga</param>
        /// <param name="teamId">die Id des Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Match</returns>
        public Org.OpenAPITools.Client.ApiResponse<Match> GetlastmatchbyleagueteamLeagueIdTeamIdGetWithHttpInfo(int leagueId, int teamId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueId)); // path parameter
            localVarRequestOptions.PathParameters.Add("teamId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetlastmatchbyleagueteamLeagueIdTeamIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Match>("/getlastmatchbyleagueteam/{leagueId}/{teamId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetlastmatchbyleagueteamLeagueIdTeamIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt das letzte zurückliegende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">die Id der Liga</param>
        /// <param name="teamId">die Id des Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Match</returns>
        public async System.Threading.Tasks.Task<Match> GetlastmatchbyleagueteamLeagueIdTeamIdGetAsync(int leagueId, int teamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Match> localVarResponse = await GetlastmatchbyleagueteamLeagueIdTeamIdGetWithHttpInfoAsync(leagueId, teamId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt das letzte zurückliegende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">die Id der Liga</param>
        /// <param name="teamId">die Id des Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Match)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Match>> GetlastmatchbyleagueteamLeagueIdTeamIdGetWithHttpInfoAsync(int leagueId, int teamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueId)); // path parameter
            localVarRequestOptions.PathParameters.Add("teamId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetlastmatchbyleagueteamLeagueIdTeamIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Match>("/getlastmatchbyleagueteam/{leagueId}/{teamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetlastmatchbyleagueteamLeagueIdTeamIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt eine Struktur von Spieldaten aller Spiele der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Match&gt;</returns>
        public List<Match> GetmatchdataLeagueShortcutLeagueSeasonGet(string leagueShortcut, int leagueSeason, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Match>> localVarResponse = GetmatchdataLeagueShortcutLeagueSeasonGetWithHttpInfo(leagueShortcut, leagueSeason);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt eine Struktur von Spieldaten aller Spiele der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Match>> GetmatchdataLeagueShortcutLeagueSeasonGetWithHttpInfo(string leagueShortcut, int leagueSeason, int operationIndex = 0)
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetmatchdataLeagueShortcutLeagueSeasonGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeason", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueSeason)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetmatchdataLeagueShortcutLeagueSeasonGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Match>>("/getmatchdata/{leagueShortcut}/{leagueSeason}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetmatchdataLeagueShortcutLeagueSeasonGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt eine Struktur von Spieldaten aller Spiele der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        public async System.Threading.Tasks.Task<List<Match>> GetmatchdataLeagueShortcutLeagueSeasonGetAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Match>> localVarResponse = await GetmatchdataLeagueShortcutLeagueSeasonGetWithHttpInfoAsync(leagueShortcut, leagueSeason, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt eine Struktur von Spieldaten aller Spiele der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Match>>> GetmatchdataLeagueShortcutLeagueSeasonGetWithHttpInfoAsync(string leagueShortcut, int leagueSeason, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetmatchdataLeagueShortcutLeagueSeasonGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeason", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueSeason)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetmatchdataLeagueShortcutLeagueSeasonGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/getmatchdata/{leagueShortcut}/{leagueSeason}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetmatchdataLeagueShortcutLeagueSeasonGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="groupOrderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Match&gt;</returns>
        public List<Match> GetmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGet(string leagueShortcut, int leagueSeason, int groupOrderId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Match>> localVarResponse = GetmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGetWithHttpInfo(leagueShortcut, leagueSeason, groupOrderId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="groupOrderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Match>> GetmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGetWithHttpInfo(string leagueShortcut, int leagueSeason, int groupOrderId, int operationIndex = 0)
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeason", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueSeason)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupOrderId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupOrderId)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Match>>("/getmatchdata/{leagueShortcut}/{leagueSeason}/{groupOrderId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="groupOrderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        public async System.Threading.Tasks.Task<List<Match>> GetmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGetAsync(string leagueShortcut, int leagueSeason, int groupOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Match>> localVarResponse = await GetmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGetWithHttpInfoAsync(leagueShortcut, leagueSeason, groupOrderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut"></param>
        /// <param name="leagueSeason"></param>
        /// <param name="groupOrderId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Match>>> GetmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGetWithHttpInfoAsync(string leagueShortcut, int leagueSeason, int groupOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeason", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueSeason)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupOrderId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupOrderId)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/getmatchdata/{leagueShortcut}/{leagueSeason}/{groupOrderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetmatchdataLeagueShortcutLeagueSeasonGroupOrderIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt eine Struktur von Spieldaten aller Spiele eines Teams der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) für das im \&quot;teamFilterstring\&quot; übergebene Team zurueck.   Hier reicht ein Teil des Vereinsnamen aus. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="teamFilterstring">Name bzw. Teil des Namens eines Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Match&gt;</returns>
        public List<Match> GetmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet(string leagueShortcut, int leagueSeason, string teamFilterstring, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Match>> localVarResponse = GetmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGetWithHttpInfo(leagueShortcut, leagueSeason, teamFilterstring);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt eine Struktur von Spieldaten aller Spiele eines Teams der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) für das im \&quot;teamFilterstring\&quot; übergebene Team zurueck.   Hier reicht ein Teil des Vereinsnamen aus. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="teamFilterstring">Name bzw. Teil des Namens eines Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Match>> GetmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGetWithHttpInfo(string leagueShortcut, int leagueSeason, string teamFilterstring, int operationIndex = 0)
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet");
            }

            // verify the required parameter 'teamFilterstring' is set
            if (teamFilterstring == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'teamFilterstring' when calling MatchdataApi->GetmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeason", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueSeason)); // path parameter
            localVarRequestOptions.PathParameters.Add("teamFilterstring", Org.OpenAPITools.Client.ClientUtils.ParameterToString(teamFilterstring)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Match>>("/getmatchdata/{leagueShortcut}/{leagueSeason}/{teamFilterstring}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt eine Struktur von Spieldaten aller Spiele eines Teams der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) für das im \&quot;teamFilterstring\&quot; übergebene Team zurueck.   Hier reicht ein Teil des Vereinsnamen aus. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="teamFilterstring">Name bzw. Teil des Namens eines Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        public async System.Threading.Tasks.Task<List<Match>> GetmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGetAsync(string leagueShortcut, int leagueSeason, string teamFilterstring, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Match>> localVarResponse = await GetmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGetWithHttpInfoAsync(leagueShortcut, leagueSeason, teamFilterstring, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt eine Struktur von Spieldaten aller Spiele eines Teams der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) für das im \&quot;teamFilterstring\&quot; übergebene Team zurueck.   Hier reicht ein Teil des Vereinsnamen aus. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">der Shortcut der Liga, z.B. &#39;bl1&#39; für die erste Bundesliga</param>
        /// <param name="leagueSeason">die Saison der Liga, z.B. 2019 für die Saison 2019/2020</param>
        /// <param name="teamFilterstring">Name bzw. Teil des Namens eines Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Match>>> GetmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGetWithHttpInfoAsync(string leagueShortcut, int leagueSeason, string teamFilterstring, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet");
            }

            // verify the required parameter 'teamFilterstring' is set
            if (teamFilterstring == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'teamFilterstring' when calling MatchdataApi->GetmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter
            localVarRequestOptions.PathParameters.Add("leagueSeason", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueSeason)); // path parameter
            localVarRequestOptions.PathParameters.Add("teamFilterstring", Org.OpenAPITools.Client.ClientUtils.ParameterToString(teamFilterstring)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/getmatchdata/{leagueShortcut}/{leagueSeason}/{teamFilterstring}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetmatchdataLeagueShortcutLeagueSeasonTeamFilterstringGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Match</returns>
        public Match GetmatchdataMatchIdGet(int matchId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Match> localVarResponse = GetmatchdataMatchIdGetWithHttpInfo(matchId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Match</returns>
        public Org.OpenAPITools.Client.ApiResponse<Match> GetmatchdataMatchIdGetWithHttpInfo(int matchId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("matchId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(matchId)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetmatchdataMatchIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Match>("/getmatchdata/{matchId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetmatchdataMatchIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Match</returns>
        public async System.Threading.Tasks.Task<Match> GetmatchdataMatchIdGetAsync(int matchId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Match> localVarResponse = await GetmatchdataMatchIdGetWithHttpInfoAsync(matchId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matchId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Match)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Match>> GetmatchdataMatchIdGetWithHttpInfoAsync(int matchId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("matchId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(matchId)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetmatchdataMatchIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Match>("/getmatchdata/{matchId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetmatchdataMatchIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt eine Struktur von Matches zurück, bei welchen die als Parameter übergebenen Teams gegeneinander spielen. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId1">die Id des ersten Teams</param>
        /// <param name="teamId2">die Id des anderen Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Match&gt;</returns>
        public List<Match> GetmatchdataTeamId1TeamId2Get(int teamId1, int teamId2, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Match>> localVarResponse = GetmatchdataTeamId1TeamId2GetWithHttpInfo(teamId1, teamId2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt eine Struktur von Matches zurück, bei welchen die als Parameter übergebenen Teams gegeneinander spielen. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId1">die Id des ersten Teams</param>
        /// <param name="teamId2">die Id des anderen Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Match>> GetmatchdataTeamId1TeamId2GetWithHttpInfo(int teamId1, int teamId2, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("teamId1", Org.OpenAPITools.Client.ClientUtils.ParameterToString(teamId1)); // path parameter
            localVarRequestOptions.PathParameters.Add("teamId2", Org.OpenAPITools.Client.ClientUtils.ParameterToString(teamId2)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetmatchdataTeamId1TeamId2Get";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Match>>("/getmatchdata/{teamId1}/{teamId2}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetmatchdataTeamId1TeamId2Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt eine Struktur von Matches zurück, bei welchen die als Parameter übergebenen Teams gegeneinander spielen. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId1">die Id des ersten Teams</param>
        /// <param name="teamId2">die Id des anderen Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        public async System.Threading.Tasks.Task<List<Match>> GetmatchdataTeamId1TeamId2GetAsync(int teamId1, int teamId2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Match>> localVarResponse = await GetmatchdataTeamId1TeamId2GetWithHttpInfoAsync(teamId1, teamId2, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt eine Struktur von Matches zurück, bei welchen die als Parameter übergebenen Teams gegeneinander spielen. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId1">die Id des ersten Teams</param>
        /// <param name="teamId2">die Id des anderen Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Match>>> GetmatchdataTeamId1TeamId2GetWithHttpInfoAsync(int teamId1, int teamId2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("teamId1", Org.OpenAPITools.Client.ClientUtils.ParameterToString(teamId1)); // path parameter
            localVarRequestOptions.PathParameters.Add("teamId2", Org.OpenAPITools.Client.ClientUtils.ParameterToString(teamId2)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetmatchdataTeamId1TeamId2Get";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/getmatchdata/{teamId1}/{teamId2}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetmatchdataTeamId1TeamId2Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamFilterstring"></param>
        /// <param name="weekCountPast"></param>
        /// <param name="weekCountFuture"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Match&gt;</returns>
        public List<Match> GetmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGet(string teamFilterstring, int weekCountPast, int weekCountFuture, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Match>> localVarResponse = GetmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGetWithHttpInfo(teamFilterstring, weekCountPast, weekCountFuture);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamFilterstring"></param>
        /// <param name="weekCountPast"></param>
        /// <param name="weekCountFuture"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Match>> GetmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGetWithHttpInfo(string teamFilterstring, int weekCountPast, int weekCountFuture, int operationIndex = 0)
        {
            // verify the required parameter 'teamFilterstring' is set
            if (teamFilterstring == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'teamFilterstring' when calling MatchdataApi->GetmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("teamFilterstring", Org.OpenAPITools.Client.ClientUtils.ParameterToString(teamFilterstring)); // path parameter
            localVarRequestOptions.PathParameters.Add("weekCountPast", Org.OpenAPITools.Client.ClientUtils.ParameterToString(weekCountPast)); // path parameter
            localVarRequestOptions.PathParameters.Add("weekCountFuture", Org.OpenAPITools.Client.ClientUtils.ParameterToString(weekCountFuture)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Match>>("/getmatchesbyteam/{teamFilterstring}/{weekCountPast}/{weekCountFuture}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamFilterstring"></param>
        /// <param name="weekCountPast"></param>
        /// <param name="weekCountFuture"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        public async System.Threading.Tasks.Task<List<Match>> GetmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGetAsync(string teamFilterstring, int weekCountPast, int weekCountFuture, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Match>> localVarResponse = await GetmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGetWithHttpInfoAsync(teamFilterstring, weekCountPast, weekCountFuture, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamFilterstring"></param>
        /// <param name="weekCountPast"></param>
        /// <param name="weekCountFuture"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Match>>> GetmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGetWithHttpInfoAsync(string teamFilterstring, int weekCountPast, int weekCountFuture, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'teamFilterstring' is set
            if (teamFilterstring == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'teamFilterstring' when calling MatchdataApi->GetmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("teamFilterstring", Org.OpenAPITools.Client.ClientUtils.ParameterToString(teamFilterstring)); // path parameter
            localVarRequestOptions.PathParameters.Add("weekCountPast", Org.OpenAPITools.Client.ClientUtils.ParameterToString(weekCountPast)); // path parameter
            localVarRequestOptions.PathParameters.Add("weekCountFuture", Org.OpenAPITools.Client.ClientUtils.ParameterToString(weekCountFuture)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/getmatchesbyteam/{teamFilterstring}/{weekCountPast}/{weekCountFuture}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetmatchesbyteamTeamFilterstringWeekCountPastWeekCountFutureGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="weekCountPast"></param>
        /// <param name="weekCountFuture"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Match&gt;</returns>
        public List<Match> GetmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGet(int teamId, int weekCountPast, int weekCountFuture, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Match>> localVarResponse = GetmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGetWithHttpInfo(teamId, weekCountPast, weekCountFuture);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="weekCountPast"></param>
        /// <param name="weekCountFuture"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Match&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Match>> GetmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGetWithHttpInfo(int teamId, int weekCountPast, int weekCountFuture, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("teamId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("weekCountPast", Org.OpenAPITools.Client.ClientUtils.ParameterToString(weekCountPast)); // path parameter
            localVarRequestOptions.PathParameters.Add("weekCountFuture", Org.OpenAPITools.Client.ClientUtils.ParameterToString(weekCountFuture)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Match>>("/getmatchesbyteamid/{teamId}/{weekCountPast}/{weekCountFuture}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="weekCountPast"></param>
        /// <param name="weekCountFuture"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Match&gt;</returns>
        public async System.Threading.Tasks.Task<List<Match>> GetmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGetAsync(int teamId, int weekCountPast, int weekCountFuture, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Match>> localVarResponse = await GetmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGetWithHttpInfoAsync(teamId, weekCountPast, weekCountFuture, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId"></param>
        /// <param name="weekCountPast"></param>
        /// <param name="weekCountFuture"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Match&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Match>>> GetmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGetWithHttpInfoAsync(int teamId, int weekCountPast, int weekCountFuture, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("teamId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("weekCountPast", Org.OpenAPITools.Client.ClientUtils.ParameterToString(weekCountPast)); // path parameter
            localVarRequestOptions.PathParameters.Add("weekCountFuture", Org.OpenAPITools.Client.ClientUtils.ParameterToString(weekCountFuture)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Match>>("/getmatchesbyteamid/{teamId}/{weekCountPast}/{weekCountFuture}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetmatchesbyteamidTeamIdWeekCountPastWeekCountFutureGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt das nächste folgende Spiel des übergebenen LigaShortcuts zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">Der Liga-Shortcut</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Match</returns>
        public Match GetnextmatchbyleagueshortcutLeagueShortcutGet(string leagueShortcut, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Match> localVarResponse = GetnextmatchbyleagueshortcutLeagueShortcutGetWithHttpInfo(leagueShortcut);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt das nächste folgende Spiel des übergebenen LigaShortcuts zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">Der Liga-Shortcut</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Match</returns>
        public Org.OpenAPITools.Client.ApiResponse<Match> GetnextmatchbyleagueshortcutLeagueShortcutGetWithHttpInfo(string leagueShortcut, int operationIndex = 0)
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetnextmatchbyleagueshortcutLeagueShortcutGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetnextmatchbyleagueshortcutLeagueShortcutGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Match>("/getnextmatchbyleagueshortcut/{leagueShortcut}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetnextmatchbyleagueshortcutLeagueShortcutGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt das nächste folgende Spiel des übergebenen LigaShortcuts zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">Der Liga-Shortcut</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Match</returns>
        public async System.Threading.Tasks.Task<Match> GetnextmatchbyleagueshortcutLeagueShortcutGetAsync(string leagueShortcut, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Match> localVarResponse = await GetnextmatchbyleagueshortcutLeagueShortcutGetWithHttpInfoAsync(leagueShortcut, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt das nächste folgende Spiel des übergebenen LigaShortcuts zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueShortcut">Der Liga-Shortcut</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Match)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Match>> GetnextmatchbyleagueshortcutLeagueShortcutGetWithHttpInfoAsync(string leagueShortcut, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'leagueShortcut' is set
            if (leagueShortcut == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'leagueShortcut' when calling MatchdataApi->GetnextmatchbyleagueshortcutLeagueShortcutGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueShortcut", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueShortcut)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetnextmatchbyleagueshortcutLeagueShortcutGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Match>("/getnextmatchbyleagueshortcut/{leagueShortcut}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetnextmatchbyleagueshortcutLeagueShortcutGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt das nächste folgende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">die Id der Liga</param>
        /// <param name="teamId">die Id des Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Match</returns>
        public Match GetnextmatchbyleagueteamLeagueIdTeamIdGet(int leagueId, int teamId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Match> localVarResponse = GetnextmatchbyleagueteamLeagueIdTeamIdGetWithHttpInfo(leagueId, teamId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt das nächste folgende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">die Id der Liga</param>
        /// <param name="teamId">die Id des Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Match</returns>
        public Org.OpenAPITools.Client.ApiResponse<Match> GetnextmatchbyleagueteamLeagueIdTeamIdGetWithHttpInfo(int leagueId, int teamId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueId)); // path parameter
            localVarRequestOptions.PathParameters.Add("teamId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetnextmatchbyleagueteamLeagueIdTeamIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Match>("/getnextmatchbyleagueteam/{leagueId}/{teamId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetnextmatchbyleagueteamLeagueIdTeamIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt das nächste folgende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">die Id der Liga</param>
        /// <param name="teamId">die Id des Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Match</returns>
        public async System.Threading.Tasks.Task<Match> GetnextmatchbyleagueteamLeagueIdTeamIdGetAsync(int leagueId, int teamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Match> localVarResponse = await GetnextmatchbyleagueteamLeagueIdTeamIdGetWithHttpInfoAsync(leagueId, teamId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt das nächste folgende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">die Id der Liga</param>
        /// <param name="teamId">die Id des Teams</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Match)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Match>> GetnextmatchbyleagueteamLeagueIdTeamIdGetWithHttpInfoAsync(int leagueId, int teamId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueId)); // path parameter
            localVarRequestOptions.PathParameters.Add("teamId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(teamId)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetnextmatchbyleagueteamLeagueIdTeamIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Match>("/getnextmatchbyleagueteam/{leagueId}/{teamId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetnextmatchbyleagueteamLeagueIdTeamIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt die für diese Liga konfigurierten Ergebnistypen zurück! 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Id der Liga, z.B. &#39;4500&#39; für die erste Bundesliga 2021/2022</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResultInfo</returns>
        public ResultInfo GetresultinfosLeagueIdGet(int leagueId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ResultInfo> localVarResponse = GetresultinfosLeagueIdGetWithHttpInfo(leagueId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt die für diese Liga konfigurierten Ergebnistypen zurück! 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Id der Liga, z.B. &#39;4500&#39; für die erste Bundesliga 2021/2022</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResultInfo</returns>
        public Org.OpenAPITools.Client.ApiResponse<ResultInfo> GetresultinfosLeagueIdGetWithHttpInfo(int leagueId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueId)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetresultinfosLeagueIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ResultInfo>("/getresultinfos/{leagueId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetresultinfosLeagueIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gibt die für diese Liga konfigurierten Ergebnistypen zurück! 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Id der Liga, z.B. &#39;4500&#39; für die erste Bundesliga 2021/2022</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResultInfo</returns>
        public async System.Threading.Tasks.Task<ResultInfo> GetresultinfosLeagueIdGetAsync(int leagueId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ResultInfo> localVarResponse = await GetresultinfosLeagueIdGetWithHttpInfoAsync(leagueId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gibt die für diese Liga konfigurierten Ergebnistypen zurück! 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Id der Liga, z.B. &#39;4500&#39; für die erste Bundesliga 2021/2022</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResultInfo)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ResultInfo>> GetresultinfosLeagueIdGetWithHttpInfoAsync(int leagueId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("leagueId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(leagueId)); // path parameter

            localVarRequestOptions.Operation = "MatchdataApi.GetresultinfosLeagueIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResultInfo>("/getresultinfos/{leagueId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetresultinfosLeagueIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
